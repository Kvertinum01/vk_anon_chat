from vkbottle.bot import BotLabeler, Message, rules

from src import texts
from src import kbs
from src import app

from src.repositories import UserRepository
from src.models.user_model import User
from src.states import UserInfo
from src.handlers.vip import send_vip_rates, end_vip

from datetime import datetime

bl = BotLabeler()


@bl.private_message(text=["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"])
async def continue_chat(message: Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª", keyboard=kbs.choose_sex_kb)


@bl.private_message(text="–í–≤–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
async def repeat_age(message: Message):
    await app.bot.state_dispenser.set(message.from_id, UserInfo.AGE)
    return "‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–±–∏—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"


@bl.private_message(state=UserInfo.AGE)
async def save_user_age(message: Message):
    await app.bot.state_dispenser.delete(message.from_id)
    user_rep = UserRepository(message.from_id)
    
    if not message.text.isdigit():
        return await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ",
            keyboard=kbs.repeat_age_kb
        )
    
    if int(message.text) < 16:
        return await message.answer(
            "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç",
            keyboard=kbs.repeat_age_kb
        )
    
    if int(message.text) > 100:
        return await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç",
            keyboard=kbs.repeat_age_kb
        )
    
    if await user_rep.get() is not None:
        await user_rep.update_age(int(message.text))
    else:
        return "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"

    user_inf = await user_rep.get()

    await user_rep.end_reg()
    await message.answer(
        "‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=kbs.main_menu_kb(user_inf.sex)
    )


@bl.private_message(text="–ù–∞—á–∞—Ç—å")
async def start_bot(message: Message):
    await message.answer(
        texts.start_bot,
        keyboard=kbs.welcome_kb,
        dont_parse_links=True,
    )


@bl.private_message(text=["‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—ã–π —á–∞—Ç", "‚è™ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —á–∞—Ç–∞"])
async def back_to_old_chat(message: Message):
    return await message.answer(texts.old_chat, keyboard=kbs.old_chat_conf_kb)


@bl.private_message(
    rules.PayloadRule([{"cmd": "set_male"}, {"cmd": "set_female"}])
)
async def choose_sex(message: Message):
    user_rep = UserRepository(message.from_id)
    curr_sex = 1 if message.text == "–ú—É–∂—Å–∫–æ–π" else 2

    if not await user_rep.get():
        await user_rep.new(20)

    await app.bot.state_dispenser.set(message.from_id, UserInfo.AGE)

    await user_rep.update_sex(curr_sex)
    return "‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–±–∏—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"


@bl.private_message(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, user_inf: User):
    text_sex = "–ú—É–∂—Å–∫–æ–π" if user_inf.sex == 1 else "–ñ–µ–Ω—Å–∫–∏–π"
    text_vip = "–ü–æ–¥–∫–ª—é—á–µ–Ω" if user_inf.vip_status else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    await message.answer(texts.profile_text.format(
        sex=text_sex, age=user_inf.age,
        created_at=user_inf.created_at.strftime("%d.%m.%Y"),
        vip_status=text_vip,
    ), keyboard=kbs.profile_kb())


@bl.private_message(rules.CommandRule("–ø–æ–¥–ø–∏—Å–∫–∏", ["!", "/"]))
async def remove_vip(message: Message, user_inf: User):
    if not user_inf.vip_status:
        return "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞"
    
    return await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–µ—Ç–∏–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
        keyboard=kbs.confirm_disable_vip_kb
    )


@bl.private_message(rules.PayloadRule({"cmd": "confirm_vip"}))
async def confirm_vip(message: Message):
    confirm_res = await end_vip(message.from_id)

    if not confirm_res:
        return "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VIP"
    
    user_rep = UserRepository(message.from_id)
    user_inf = await user_rep.get()

    await message.answer(
        "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞",
        keyboard=kbs.main_menu_kb(user_inf.sex)
    )


@bl.private_message(rules.PayloadRule({"cmd": "continue_vip"}))
async def continue_vip(message: Message):
    user_rep = UserRepository(message.from_id)
    user_inf = await user_rep.get()

    await message.answer(
        "‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=kbs.main_menu_kb(user_inf.sex)
    )


@bl.private_message(text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥")
@bl.private_message(rules.CommandRule("—Å—Ç–æ–ø", ["!", "/"]))
async def pre_stop_chat(message: Message):
    return await message.answer(texts.stop_dialog, keyboard=kbs.stop_dialog_kb)


@bl.private_message(rules.PayloadRule({"cmd": "no_stop"}))
async def continue_dialog(_):
    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ"


@bl.private_message(rules.CommandRule("–≤–∏–ø", ["!", "/"]))
@bl.private_message(text=["üëë VIP —Å—Ç–∞—Ç—É—Å", "–¢–∞—Ä–∏—Ñ—ã"])
async def vip_info(message: Message, user_inf: User):
    await send_vip_rates(message.from_id, user_inf)


@bl.private_message("!endvip")
async def end_vip_inf(message: Message, user_inf: User):
    await message.answer(user_inf.exp_vip.strftime("%Y-%m-%dT%H:%M:%S"))

@bl.private_message("!setvip")
async def set_vip(message: Message):
    user_rep = UserRepository(message.from_id)
    await user_rep.set_exp(datetime.now())
