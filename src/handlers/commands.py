import json

from vkbottle import EMPTY_KEYBOARD, PhotoMessageUploader, API
from vkbottle.bot import BotLabeler, Message, rules

from src import texts
from src import kbs
from src import app

from src.repositories import UserRepository
from src.chat_manager.manager import ChatManager
from src.chat_manager.cloudpayments import CloudPayments
from src.states import UserInfo
from src.uploading.upload_manager import UploadManager
from src.uploading.upload_cache import CacheAssistant
from src.middlewares import api_manager, cached_urls
from src.config_reader import PAY_TOKEN, rates


bl = BotLabeler()
cache_assistant = CacheAssistant()
chat_manager = ChatManager("vk")
cloud_payments = CloudPayments(PAY_TOKEN)


async def send_vip_rates(user_id: int, is_chat = False):
    user_rep = UserRepository(user_id)
    user_inf = await user_rep.get()

    curr_api = api_manager[user_id]

    if user_inf.vip_status:
        return await curr_api.messages.send(
            user_id, random_id=0, message="üëë –í–∏–ø: –ü–æ–¥–∫–ª—é—á–µ–Ω"
        )

    if cached_urls.get(user_id) is None:
        await cloud_payments.setup(curr_api.http_client)

        pay_objects = [
            await cloud_payments.method(
                "orders/create", {
                    "Amount": curr_data["amount"],
                    "Description": curr_data["desc"],
                    "AccountId": str(user_id),
                    "RequireConfirmation": curr_data["confirm"],
                    "JsonData": curr_data["json_data"],
                }
            ) for curr_data in rates
        ]
        
        cached_urls[user_id] = [curr_obj["Url"] for curr_obj in pay_objects]

    vip_links = cached_urls[user_id]

    res_text = texts.vip_info.format(extra_info="")

    if is_chat:
        res_text = texts.vip_info.format(
            extra_info="\n1 —Ä—É–±. - 1 —á–∞—Å (–∑–∞—Ç–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ 399 —Ä—É–±. —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏)\n"
        )

    res_attachment = await cache_assistant.get_photo(
        curr_api, "misc/images/vip_info.jpg"
    )

    return await curr_api.messages.send(
        user_id, random_id=0, message=res_text,
        attachment=res_attachment,
        keyboard=kbs.buy_vip_kb(vip_links, is_chat)
    )


@bl.private_message(text=["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–í–≤–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ", "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"])
async def continue_chat(message: Message):
    await app.bot.state_dispenser.set(message.from_id, UserInfo.AGE)
    return "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 18"


@bl.private_message(state=UserInfo.AGE)
async def save_user_age(message: Message):
    await app.bot.state_dispenser.delete(message.from_id)
    user_rep = UserRepository(message.from_id)
    
    if not message.text.isdigit():
        return await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ",
            keyboard=kbs.repeat_age_kb
        )
    
    if int(message.text) < 16:
        return await message.answer(
            "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç",
            keyboard=kbs.repeat_age_kb
        )
    
    if int(message.text) > 100:
        return await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç",
            keyboard=kbs.repeat_age_kb
        )
    
    if await user_rep.get() is not None:
        await user_rep.update_age(int(message.text))
    else:
        await user_rep.new(int(message.text))

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª", keyboard=kbs.choose_sex_kb)


@bl.private_message(text="–ù–∞—á–∞—Ç—å")
async def start_bot(message: Message):
    await message.answer(texts.start_bot, keyboard=kbs.welcome_kb)


@bl.private_message(text=["‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—ã–π —á–∞—Ç", "‚è™ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —á–∞—Ç–∞"])
async def back_to_old_chat(message: Message):
    return await message.answer(texts.old_chat, keyboard=kbs.old_chat_conf_kb)


@bl.private_message(text=["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
async def choose_sex(message: Message):
    user_rep = UserRepository(message.from_id)
    user_inf = await user_rep.get()
    curr_sex = 1 if message.text == "–ú—É–∂—Å–∫–æ–π" else 2

    if user_inf is None:
        return "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"

    await user_rep.end_reg()
    await user_rep.update_sex(curr_sex)
    await message.answer(
        "‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=kbs.main_menu_kb(curr_sex, user_inf.vip_status)
    )


@bl.private_message(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_rep = UserRepository(message.from_id)
    user_inf = await user_rep.get()

    text_sex = "–ú—É–∂—Å–∫–æ–π" if user_inf.sex == 1 else "–ñ–µ–Ω—Å–∫–∏–π"
    text_vip = "–ü–æ–¥–∫–ª—é—á–µ–Ω" if user_inf.vip_status else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    await message.answer(texts.profile_text.format(
        sex=text_sex, age=user_inf.age,
        created_at=user_inf.created_at.strftime("%d.%m.%Y"),
        vip_status=text_vip,
    ), keyboard=kbs.profile_kb(user_inf.vip_status))


@bl.private_message(text="–û—Ç–∫–ª—é—á–∏—Ç—å VIP")
async def remove_vip(message: Message):
    user_rep = UserRepository(message.from_id)
    user_inf = await user_rep.get()

    if not user_inf.vip_status:
        return "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞"

    await cloud_payments.setup()
    await cloud_payments.method("subscriptions/cancel", {"Id": user_inf.sub_id})

    await user_rep.del_vip()

    return "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"


@bl.private_message(text=["üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "üëÑ –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É"])
async def find_companion(message: Message):
    if chat_manager.check_active_chats(message.from_id):
        return "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ"

    if chat_manager.check_queue(message.from_id):
        return "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏"

    sex_prefer = None
    user_inf = await UserRepository(message.from_id).get()

    if message.text in ["üëÑ –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É"] and user_inf.vip_status:
        sex_prefer = 2 if user_inf.sex == 1 else 1

    curr_user = await chat_manager.find_companion(message.from_id, sex_prefer)
    
    if not curr_user:
        return await message.answer(
            "–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ",
            keyboard=kbs.leave_queue_kb
        )
    
    await message.answer(texts.got_companion, keyboard=EMPTY_KEYBOARD)
    await api_manager[curr_user.id].messages.send(
        curr_user.id, message=texts.got_companion,
        keyboard=EMPTY_KEYBOARD, random_id=0
    )


@bl.private_message(text="–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def leave_queue(message: Message):
    leave_res = chat_manager.leave_queue(message.from_id)

    if not leave_res:
        return "–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
    
    return "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å"


@bl.private_message(rules.CommandRule("—Å—Ç–æ–ø", ["!", "/"]))
async def pre_stop_chat(message: Message):
    return await message.answer(texts.stop_dialog, keyboard=kbs.stop_dialog_kb)


@bl.private_message(rules.PayloadRule({"cmd": "no_stop"}))
async def continue_dialog(_):
    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ"


@bl.private_message(rules.PayloadRule({"cmd": "yes_stop"}))
async def stop_dialog(message: Message):
    if not chat_manager.check_active_chats(message.from_id):
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"
    
    chat_user_id = chat_manager.get_active_user(message.from_id)
    chat_manager.remove_active_chat(message.from_id)

    chat_user_inf = await UserRepository(chat_user_id).get()
    curr_user_inf = await UserRepository(message.from_id).get()

    await message.answer(
        "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥",
        keyboard=kbs.main_menu_kb(chat_user_inf.sex, curr_user_inf.vip_status)
    )

    await api_manager[chat_user_id].messages.send(
        chat_user_id, message="‚ùó–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥",
        keyboard=kbs.main_menu_kb(chat_user_inf.sex, curr_user_inf.vip_status),
        random_id=0
    )


@bl.private_message(rules.CommandRule("–Ω–æ–≤—ã–π", ["!", "/"]))
async def new_chat(message: Message):
    await stop_dialog(message)
    await find_companion(message)


@bl.private_message(text="üëë VIP —Å—Ç–∞—Ç—É—Å")
async def vip_info(message: Message):
    await send_vip_rates(message.from_id)


@bl.private_message(text="–û—Ñ–æ—Ä–º–∏—Ç—å")
async def vip_info(message: Message):
    if not chat_manager.check_active_chats(message.from_id):
        return "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    await send_vip_rates(message.from_id, True)


@bl.private_message()
async def on_all(message: Message):
    curr_user_inf = await UserRepository(message.from_id).get()

    if not chat_manager.check_active_chats(message.from_id):
        return await message.answer(
            texts.unk_command,
            keyboard=kbs.main_menu_kb(curr_user_inf.sex, curr_user_inf.vip_status)
        )
    
    chat_user_id = chat_manager.get_active_user(message.from_id)
    attachments = []

    chat_user_inf = await UserRepository(chat_user_id).get()

    curr_vip_status = chat_user_inf.vip_status or curr_user_inf.vip_status

    for curr_attachment in message.attachments:
        attach_type = curr_attachment.type.value

        upload_manager = UploadManager(message.ctx_api, message.peer_id)

        if not upload_manager.check_document(attach_type):
            continue

        match attach_type:
            case "photo":
                if not curr_vip_status:
                    await message.answer(
                        "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ñ–æ—Ç–æ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –ø–æ–¥–∫–ª—é—á–∏ VIP —Ç–∞—Ä–∏—Ñ",
                        keyboard=kbs.vip_in_chat_kb
                    )
                    return await api_manager[chat_user_id].messages.send(
                        chat_user_id, random_id=0,
                        message="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Ñ–æ—Ç–æ. "
                        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±–º–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.",
                        keyboard=kbs.vip_in_chat_kb
                    )

                res_string = await upload_manager.get_attachment(
                    attach_type, curr_attachment.photo.sizes[-1].url,
                )

            case "audio_message":
                if not curr_vip_status:
                    await message.answer(
                        "–ì–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ VIP —é–∑–µ—Ä—ã",
                        keyboard=kbs.vip_in_chat_kb
                    )
                    return await api_manager[chat_user_id].messages.send(
                        chat_user_id, random_id=0,
                        message="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≥–æ–ª–æ—Å–æ–≤–æ–µ. "
                        "–û—Ñ–æ—Ä–º–∏—Ç–µ VIP —Å—Ç–∞—Ç—É—Å –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏.",
                        keyboard=kbs.vip_in_chat_kb
                    )

                res_string = await upload_manager.get_attachment(
                    attach_type, curr_attachment.audio_message.link_ogg,
                    title="voice_message",
                )

            case "video":
                if not curr_vip_status:
                    await message.answer(
                        "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞! –û–ø–ª–∞—Ç–∏—Ç–µ VIP —Ç–∞—Ä–∏—Ñ.",
                        keyboard=kbs.vip_in_chat_kb
                    )
                    return await api_manager[chat_user_id].messages.send(
                        chat_user_id, random_id=0,
                        message="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤–∏–¥–µ–æ. "
                        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±–º–µ–Ω–∞ –≤–∏–¥–µ–æ.",
                        keyboard=kbs.vip_in_chat_kb
                    )

                res_string = f"video{curr_attachment.video.owner_id}_{curr_attachment.video.id}"

            case _:
                continue

        attachments.append(res_string)

    await message.ctx_api.messages.mark_as_read(peer_id=message.peer_id)

    await api_manager[chat_user_id].messages.send(
        chat_user_id, message=message.text,
        attachment=",".join(attachments),
        random_id=0
    )
