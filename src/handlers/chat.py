import cv2
import numpy

from src import kbs
from src import texts

from src.chat_manager.manager import ChatManager
from src.models.user_model import User
from src.repositories import UserRepository
from src.middlewares import api_manager
from src.uploading.upload_manager import UploadManager
from src.handlers.vip import send_vip_rates

from vkbottle import EMPTY_KEYBOARD
from vkbottle.bot import BotLabeler, Message, rules


chat_manager = ChatManager("vk")
bl = BotLabeler()


@bl.private_message(text="–û—Ñ–æ—Ä–º–∏—Ç—å")
async def vip_info(message: Message, user_inf: User):
    if not chat_manager.check_active_chats(message.from_id):
        return "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    await send_vip_rates(message.from_id, user_inf, True)


@bl.private_message(text=["üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", "üëÑ –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É", "üí™ –ù–∞–π—Ç–∏ –º—É–∂—á–∏–Ω—É"])
async def find_companion(message: Message):
    if chat_manager.check_active_chats(message.from_id):
        return "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ"

    if chat_manager.check_queue(message.from_id):
        return "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
    
    user_inf = await UserRepository(message.from_id).get()

    if chat_manager.check_daily_chats(message.from_id, user_inf.vip_status):
        return await message.answer(
            texts.dialog_limit, keyboard=kbs.check_price_kb,
        )
    
    sex_prefer = None

    if message.text in ["üëÑ –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É", "üí™ –ù–∞–π—Ç–∏ –º—É–∂—á–∏–Ω—É"]:
        if user_inf.vip_status:
            sex_prefer = 2 if user_inf.sex == 1 else 1
        else:
            return await message.answer(
                "–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                keyboard=kbs.check_price_kb
            )

    curr_user = await chat_manager.find_companion(message.from_id, sex_prefer)
    
    if not curr_user:
        return await message.answer(
            "–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ",
            keyboard=kbs.leave_queue_kb
        )
    
    await message.answer(texts.got_companion, keyboard=EMPTY_KEYBOARD)
    await api_manager[curr_user.id].messages.send(
        curr_user.id, message=texts.got_companion,
        keyboard=EMPTY_KEYBOARD, random_id=0
    )


@bl.private_message(text="–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def leave_queue(message: Message):
    leave_res = chat_manager.leave_queue(message.from_id)

    if not leave_res:
        return "–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
    
    return "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å"


@bl.private_message(rules.PayloadRule({"cmd": "yes_stop"}))
async def stop_dialog(message: Message):
    if not chat_manager.check_active_chats(message.from_id):
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"
    
    chat_user_id = chat_manager.get_active_user(message.from_id)
    chat_manager.remove_active_chat(message.from_id)

    curr_user_inf = await UserRepository(message.from_id).get()
    chat_user_inf = await UserRepository(chat_user_id).get()

    await message.answer(
        "‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥",
        keyboard=kbs.main_menu_kb(curr_user_inf.sex)
    )

    await api_manager[chat_user_id].messages.send(
        chat_user_id, message="‚ùó–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥",
        keyboard=kbs.main_menu_kb(chat_user_inf.sex),
        random_id=0
    )


@bl.private_message(rules.CommandRule("–Ω–æ–≤—ã–π", ["!", "/"]))
async def new_chat(message: Message):
    await stop_dialog(message)
    await find_companion(message)


@bl.private_message()
async def on_all(message: Message):
    curr_user_inf = await UserRepository(message.from_id).get()

    if not chat_manager.check_active_chats(message.from_id):
        return await message.answer(
            texts.unk_command,
            keyboard=kbs.main_menu_kb(curr_user_inf.sex)
        )
    
    chat_user_id = chat_manager.get_active_user(message.from_id)
    attachments = []

    chat_user_inf = await UserRepository(chat_user_id).get()

    curr_vip_status = chat_user_inf.vip_status or curr_user_inf.vip_status

    for curr_attachment in message.attachments:
        attach_type = curr_attachment.type.value

        upload_manager = UploadManager(api_manager[chat_user_id], message.peer_id)

        if not upload_manager.check_document(attach_type):
            continue

        match attach_type:
            case "photo":
                doc_bytes = await upload_manager.get_bytes(curr_attachment.photo.sizes[-1].url)

                if not curr_vip_status:
                    await message.answer(
                        "–ß—Ç–æ–±—ã –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ñ–æ—Ç–æ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –ø–æ–¥–∫–ª—é—á–∏ VIP —Ç–∞—Ä–∏—Ñ",
                        keyboard=kbs.vip_in_chat_kb
                    )

                    np_image = numpy.asarray(bytearray(doc_bytes), dtype="uint8")
                    cv2_image = cv2.imdecode(np_image, cv2.IMREAD_COLOR)

                    blured_image = cv2.blur(cv2_image, (40, 40))
                    img_bytes = cv2.imencode(".png", blured_image)[1].tobytes()

                    curr_img = await upload_manager.get_by_bytes("photo", img_bytes)

                    return await api_manager[chat_user_id].messages.send(
                        chat_user_id, random_id=0,
                        message="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Ñ–æ—Ç–æ. "
                        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±–º–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.",
                        keyboard=kbs.vip_in_chat_kb,
                        attachment=curr_img,
                    )

                res_string = await upload_manager.get_by_bytes(
                    attach_type, doc_bytes
                )

            case "audio_message":
                if not curr_vip_status:
                    await message.answer(
                        "–ì–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ VIP —é–∑–µ—Ä—ã",
                        keyboard=kbs.vip_in_chat_kb
                    )
                    return await api_manager[chat_user_id].messages.send(
                        chat_user_id, random_id=0,
                        message="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≥–æ–ª–æ—Å–æ–≤–æ–µ. "
                        "–û—Ñ–æ—Ä–º–∏—Ç–µ VIP —Å—Ç–∞—Ç—É—Å –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏.",
                        keyboard=kbs.vip_in_chat_kb
                    )

                res_string = await upload_manager.get_attachment(
                    attach_type, curr_attachment.audio_message.link_ogg,
                    title="voice_message",
                )

            case "video":
                if not curr_vip_status:
                    await message.answer(
                        "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞! –û–ø–ª–∞—Ç–∏—Ç–µ VIP —Ç–∞—Ä–∏—Ñ.",
                        keyboard=kbs.vip_in_chat_kb
                    )
                    return await api_manager[chat_user_id].messages.send(
                        chat_user_id, random_id=0,
                        message="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤–∏–¥–µ–æ. "
                        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±–º–µ–Ω–∞ –≤–∏–¥–µ–æ.",
                        keyboard=kbs.vip_in_chat_kb
                    )

                res_string = f"video{curr_attachment.video.owner_id}_{curr_attachment.video.id}"

            case _:
                continue

        attachments.append(res_string)

    await message.ctx_api.messages.mark_as_read(peer_id=message.peer_id)

    ignore_texts = ["üë§", "üëë", "üîç", "üí¨"]
    res_text = message.text

    for curr_ignore in ignore_texts:
        res_text = res_text.replace(curr_ignore, "")

    if not res_text and message.text != "":
        return

    await api_manager[chat_user_id].messages.send(
        chat_user_id, message=res_text,
        attachment=",".join(attachments),
        random_id=0
    )
